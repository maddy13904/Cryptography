#include <stdio.h>
#include <stdint.h>
#include <string.h>
#define BLOCK_SIZE 64
#define KEY_SIZE 56
int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};
int FP[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 62, 30,
    38, 6, 46, 14, 54, 22, 61, 29,
    37, 5, 45, 13, 53, 21, 60, 28,
    36, 4, 44, 12, 52, 20, 59, 27,
    35, 3, 43, 11, 51, 19, 58, 26,
    34, 2, 42, 10, 50, 18, 57, 25
};
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7,
    56, 48, 40, 32, 24, 16, 8, 0,
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4
};
uint64_t permute(uint64_t block, int *table, int size) {
	int i;
    uint64_t permuted = 0;
    for (i = 0; i < size; i++) {
        permuted |= ((block >> (BLOCK_SIZE - table[i] - 1)) & 1) << (size - i - 1);
    }
    return permuted;
}
uint64_t left_shift(uint64_t block, int shifts) {
    return ((block << shifts) | (block >> (28 - shifts))) & 0x0FFFFFFF;
}
void generate_subkeys(uint64_t key, uint64_t subkeys[16]) {
	int i;
    uint64_t permuted_key = permute(key, PC1, 56);
    uint64_t C = permuted_key >> 28;
    uint64_t D = permuted_key & 0x0FFFFFFF;
    for (i = 0; i < 16; i++) {
        C = left_shift(C, 1);
        D = left_shift(D, 1);
        uint64_t combined = (C << 28) | D;
        subkeys[i] = permute(combined, PC1, 56);
    }
}
uint64_t des(uint64_t block, uint64_t subkeys[16], int decrypt) {
	int round;
    block = permute(block, IP, BLOCK_SIZE);
    uint64_t L = block >> 32;
    uint64_t R = block & 0xFFFFFFFF;

    for (round = 0; round < 16; round++) {
        uint64_t temp = R;
        uint64_t round_key = subkeys[decrypt ? 15 - round : round];
        R ^= round_key;
        R = L ^ R;
        L = temp;
    }
    block = (L << 32) | R;
    block = permute(block, FP, BLOCK_SIZE);
    return block;
}
int main() {
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t ciphertext, decrypted_text;
    uint64_t subkeys[16];
    generate_subkeys(key, subkeys);
    printf("Original plaintext: %016llX\n", plaintext);
    ciphertext = des(plaintext, subkeys, 0);
    printf("Ciphertext: %016llX\n", ciphertext);
    decrypted_text = des(ciphertext, subkeys, 1);
    printf("Decrypted text: %016llX\n", decrypted_text);
    return 0;
}
